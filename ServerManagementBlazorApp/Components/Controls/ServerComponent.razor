@using ServerManagementBlazorApp.StateStore

@inject NavigationManager NavigationManager

@inject ChennaiOnlineServerStore ChennaiOnlineServerStore
@inject MaduraiOnlineServerStore MaduraiOnlineServerStore

@if(Server != null)
{
	<tr style="background-color:@GetBackgroundColor()">
		<td>
			@Server.Name
		</td>
		<td>
			@Server.City
		</td>
		<td style="color:@(Server.IsOnline?"green":"red")">
			@(Server.IsOnline?"online":"offline")
		</td>
		<td>
			@if (Server.IsOnline)
			{
				Random random = new Random();
				int randomNumber = random.Next(0, 1000);
				<text>@randomNumber</text>
			}
			else
			{
				<text>N/A</text>

			}
		</td>
		<td>
			@if (Server.IsOnline)
			{
				<button type="button" class="btn btn-outline-danger" @onclick="@(()=>{SetServerStatus(false);})"> Turn Off</button>
			}
			else
			{
				<button type="button" class="btn btn-outline-success" @onclick="@(() => { SetServerStatus(true); })"> Turn On</button>
			}
			<a href="/servers/@(Server.ServerId)" class="btn btn-link">Edit</a>
		</td>
		<td>
			<EditForm Model="Server"
					  FormName="@($"form-Server={Server.ServerId}")"
					  OnValidSubmit="@(() => {DeleteServer(Server.ServerId);})">
				<button type="submit" class="btn btn-danger">Delete Server</button>
			</EditForm>
		</td>
	</tr>
}


@code {
	[Parameter]
	public Server? Server { get; set; }

	[CascadingParameter(Name ="SelectedCity")]
	public string? SelectedCity { get; set; }


	/// <summary>
	///
	/// </summary>
	/// <param name="id"></param>
	private void DeleteServer(int id)
	{
		if (id > 0)
		{
			ServerRepository.DeleteServer(id);
			NavigationManager.Refresh();
			NavigationManager.NavigateTo("/server", true);
		}
	}

	private string GetBackgroundColor()
	{
		if(SelectedCity != null)
		{
			switch(this.SelectedCity)
			{
				case "chennai" : return "lightred";
				case "Theni" : return "pink";
				case "Madurai": return "powderblue";
				case "coimbatore": return "palegreen";
				case "Erode" : return "lightpink";

				default: return "white";
			}
		}
		else
		{
			return string.Empty;
		}
	}

	private void SetServerStatus (bool status)
	{
		if(this.Server is not null)
		{
			if(this.Server.IsOnline != status)
			{
				switch(this.Server.City)
				{
					case "Chennai" :
						var num = ChennaiOnlineServerStore.GetNumberOfServersOnline();
						if (status)
							ChennaiOnlineServerStore.SetNumberOfServerOnline(num + 1);
						else if (num > 1)
							ChennaiOnlineServerStore.SetNumberOfServerOnline(num - 1);

						break;

					case "Madurai":
						var num1 = MaduraiOnlineServerStore.GetNumberOfServersOnline();
						if (status)
							MaduraiOnlineServerStore.SetNumberOfServersOnline(num1 + 1);
						else if (num1 > 1)
							MaduraiOnlineServerStore.SetNumberOfServersOnline(num1 - 1);
						
						break;

					default:
						break;

				}
				this.Server.IsOnline = status;
			}
		}
	}
}
